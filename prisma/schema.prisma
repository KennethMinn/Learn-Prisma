// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//one to many -> a user has many posts and one post has one author(user)

//a model can have four fields (name, type, @attribute(optional), @attribute(optional))
model User {
  id           String   @id @default(uuid()) //a model must have an id
  name         String? //this is optional
  isAdmin      Boolean
  posts        Post[] //[] is a type modifier
  //two refrences
  closeFriends Friend[] @relation("CloseFriends")
  newFriends   Friend[] @relation("NewFriends")
}

model Post {
  id         Int      @id @default(autoincrement())
  rating     Float //general
  rate       Decimal //wider range
  createdAt  DateTime
  updatedAt  DateTime
  author     User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Friend {
  id   String @id @default(uuid())
  name String

  //two refrences
  closeFriendOf User?   @relation("CloseFriends", fields: [closeFriendId], references: [id])
  closeFriendId String?
  newFriendOf   User?   @relation("NewFriends", fields: [newFriendId], references: [id])
  newFriendId   String?
}
