// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//enum
enum Role {
  USER
  ADMIN
}

//one to many -> a user has many posts and one post has one author(user)

//a model can have four fields (name, type,field lvl @attribute(optional),field lvl @attribute(optional))
model User {
  id      String  @id @default(uuid()) //a model must have an id
  name    String? // ? -> this is optional
  email   String  @unique
  isAdmin Boolean
  role    Role    @default(USER) //enum

  //one to one with UserPrefrence model
  UserPrefrence UserPrefrence? // must be optional

  //one to many
  //two refrences -> no need to add labels for only one refrence
  writtenPosts   Post[] @relation("WrittenPosts") //[] is a type modifier
  favoritedPosts Post[] @relation("FavoritedPosts")

  //block lvl @attribute
  @@unique([name]) //we can also set unique fields in block lvl @attribute
}

model Post {
  id        Int      @id @default(autoincrement())
  rating    Float //general
  rate      Decimal //wider range
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //one to many
  //two refrences -> no need to add labels for only one refrence
  author        User   @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  favoriteByWho User   @relation("FavoritedPosts", fields: [favoriteById], references: [id])
  favoriteById  String

  //many to many with Category model
  categories Category[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  //many to many with Post model
  posts Post[]
}

model UserPrefrence {
  id           String  @id @default(uuid())
  emailUpdates Boolean

  //one to one with User model
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique //must be unique
}
